<script>
import { gameStarted, gameFinished, p1LivesText, p2LivesText, p3LivesText, numberOfPlayers, gameWinner } from '../../store';
import Phaser from 'phaser';
  var config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    parent:"game-container",
    id: "game-canvas",
    physics: {
      default: 'arcade',
      arcade: {
        gravity: { y: 100 },
        debug: false,
      },
    },
    scene: {
      preload: preload,
      create: create,
      update: update,
    },
  };

  var player1;
  var player2;
  var player3;
  var p1Controls;
  var p2Controls;
  var p3Controls;
  var gameOver = false;
  var deadCounter = [];
  var allPlayers = ['Player 1','Player 2','Player 3']
  var totalPlayers;
  var p1Lives;
  var p2Lives;
  var ground;
  var roof;
  var velocity = 60;
  var initalGravity = 200;
  var score = 0;
  var scoreText;
  var game 

gameStarted.subscribe(started => {
  if(started){
    game = new Phaser.Game(config);

  } 
    
})

numberOfPlayers.subscribe(numOfPlayers => {
  totalPlayers = numOfPlayers
})


  function preload() {
    this.load.image('sky', 'phaser/assets/sky.png');
    this.load.image('ground', 'phaser/assets/platform.png');
    this.load.image('star', 'phaser/assets/star.png');
    this.load.image('bomb', 'phaser/assets/bomb.png');
    this.load.image('normal', 'phaser/assets/normal.png');
    this.load.image('bounce', 'phaser/assets/bounce.png');
    this.load.image('down', 'phaser/assets/down.png');
    this.load.image('up', 'phaser/assets/up.png');
    this.load.image('right', 'phaser/assets/right.png');
    this.load.image('left', 'phaser/assets/left.png');
    this.load.image('ice', 'phaser/assets/ice.png');
    this.load.image('fire', 'phaser/assets/fire.png');
    this.load.image('fire2', 'phaser/assets/fire2.png');
    this.load.image('spikes', 'phaser/assets/spikes.png');

    this.load.spritesheet('p1', 'phaser/assets/p1.png', {
      frameWidth: 32,
      frameHeight: 32,
    });
    this.load.spritesheet('p2', 'phaser/assets/p2.png',{
      frameWidth: 32,
      frameHeight: 32
    });
     this.load.spritesheet('p3', 'phaser/assets/p3.png',{
      frameWidth: 32,
      frameHeight: 32
    });
  }



  

  function create() {
    // this.physics.world.createDebugGraphic();


    //  A simple background for our game
    this.add.image(400, 300, 'sky');

    ground = this.physics.add.sprite(400, 600, 'fire');
    ground.body.allowGravity = false;
    ground.body.setImmovable(true);
// Create two overlapping sprites

 this.anims.create({
    key: 'fireAnim',
    frames: [
      { key: 'fire' },
      { key: 'fire2' }
    ],
    frameRate: 2,   // 2 frames per second (switches every 500ms)
    repeat: -1      // loop forever
  });

  ground.play('fireAnim'); // play the animation on the ground sprite

 
    roof = this.physics.add.sprite(400, -15, 'spikes');
    roof.body.allowGravity = false;

    this.platforms = this.physics.add.group({
      immovable: true,
      allowGravity: false,
    });

    this.tweens.add({
      targets: roof,
      y: 2,
      duration: 1000,
      yoyo: true,
      repeat: -1,
      ease: 'Sine.easeInOut',
    });

    // Create initial platform
    const platform = this.platforms.create(
      Phaser.Math.Between(300, 500),
      Phaser.Math.Between(400, 600),
      'normal'
    );
    platform.displayWidth = 300;
    platform.setVelocityY(-velocity); // float upwards

    // The player and its settings
    //  initial player new player
    function createPlayer(scene, x, y, name) {
      let sprite = `p${name}`
            
      const player = scene.physics.add.sprite(x, y, sprite );
      // player.setBounce(0.01);
      player.setCollideWorldBounds(true);
      player.body.checkCollision.down = true;
      player.setGravityY(initalGravity);
      player.size = 2;
      player.lives = 3;
      player.name = name;

      // Create animations for each player
      player.anims.create({
      key: 'left',
      frames: player.anims.generateFrameNumbers(sprite, {
        start: 0,
        end: 1,
      }),
      frameRate: 10,
      repeat: -1,
    })

      player.anims.create({
      key: 'turn',
      frames: [{ key: sprite, frame: 2 }],
      frameRate: 20,
    });

    player.anims.create({
      key: 'right',
      frames: player.anims.generateFrameNumbers(sprite, {
        start: 3,
        end: 4,
      }),
      frameRate: 10,
      repeat: -1,
    });
      
      
      return player;
    }
   
    const playerPositions = [300, 500, 400];
    let players = [];

    numberOfPlayers.subscribe(numOfPlayers => {
      players = [];

    for( let i = 0; i < numOfPlayers; i++){
      const x = playerPositions[i] || 400;
      const player = createPlayer(this,x, 50, i+1);
      players.push(player)
    }
      [player1,player2,player3]= players;
  })
  
  

  //  player1 = createPlayer(this, 300, 50);
  //  player2 = createPlayer(this, 400, 50, 0x00ff00);
  //  player3 = createPlayer(this, 500, 50, 0xeeffee);

    //  Our player animations, turning, walking left and walking right.
    // this.anims.create({
    //   key: 'left',
    //   frames: this.anims.generateFrameNumbers('p2', {
    //     start: 0,
    //     end: 1,
    //   }),
    //   frameRate: 10,
    //   repeat: -1,
    // });

    // this.anims.create({
    //   key: 'turn',
    //   frames: [{ key: 'p2', frame: 2 }],
    //   frameRate: 20,
    // });

    // this.anims.create({
    //   key: 'right',
    //   frames: this.anims.generateFrameNumbers('p2', {
    //     start: 3,
    //     end: 4,
    //   }),
    //   frameRate: 10,
    //   repeat: -1,
    // });

    //  Input Events
    p1Controls = this.input.keyboard.createCursorKeys();
    p2Controls = this.input.keyboard.addKeys({
      left: Phaser.Input.Keyboard.KeyCodes.Z,
      right: Phaser.Input.Keyboard.KeyCodes.X,
    });
    p3Controls = this.input.keyboard.addKeys({
      left: Phaser.Input.Keyboard.KeyCodes.N,
      right: Phaser.Input.Keyboard.KeyCodes.M,
    });

    // TEXT //

    //  The score
    // scoreText = this.add.text(16, 16, 'score: 0', {
    //   fontSize: '32px',
    //   fill: '#000',
    // });


    // Colliders

    this.physics.add.collider([player1, player2, player3], platform);
    this.physics.add.collider(
      [player1, player2, player3],
      ground,
      (playerThatDied, ground) => {
        playerLose(playerThatDied, ground, this); // pass the scene explicitly
      },
      null,
      this
    );
    this.physics.add.collider(
      [player1, player2, player3],
      roof,
      (playerThatDied, ground) => {
        playerLose(playerThatDied, ground, this); // pass the scene explicitly
      },
      null,
      this
    );
    this.physics.add.collider(player1, player2);
    this.physics.add.collider(player1, player3);
    this.physics.add.collider(player2, player3);
   

    function spawnPlatform(scene) {
      const types = [
        { name: 'normal', width: 300, effect: null }, // normal
        { name: 'bounce', width: 300, effect: 'bouncy' },
        { name: 'right', width: 300, effect: 'fast' },
        { name: 'left', width: 300, effect: 'slow' },
        { name: 'up', width: 350, effect: 'grow' },
        { name: 'down', width: 350, effect: 'shrink' },
        { name: 'ice', width: 350, effect: 'cloud' },
      ];
      const choice = Phaser.Utils.Array.GetRandom(types);
      const platform = scene.platforms.create(
        Phaser.Math.Between(-100, 900),
        Phaser.Math.Between(700, 1000),
        choice.name
      );
      // platform.displayWidth = choice.width;
      platform.setVelocityY(-velocity);
      platform.effect = choice.effect;

      scene.physics.add.collider(
        [player1, player2, player3],
        platform,
        (player, plat) => {
          switch (plat.effect) {
            case 'bouncy':
              bounce(player, plat);
              break;
            case 'fast':
              player.currentPlatformType = 'fast';
              break;
            case 'slow':
              player.currentPlatformType = 'slow';
              break;
            case 'grow':
              growSize(player, plat, scene);
              break;
            case 'shrink':
              shrinkSize(player, plat, scene);
              break;
            case 'cloud':
              cloudy(player, plat, scene);
              break;
            default:
              // normal platform
              break;
          }
        }
      );

      scene.time.addEvent({
        delay: Phaser.Math.Between(1500, 3500),
        callback: () => spawnPlatform(scene),
      });
    }
    spawnPlatform(this);

     function restartGame(scene){
      gameOver = false;
    p1LivesText.set(3)
    p2LivesText.set(3);
    p3LivesText.set(3);
    deadCounter.length = 0;
      scene.scene.restart()
     }

   


       // Restarts the game
    gameFinished.subscribe(finished => {
      if(finished == false && gameOver == true){
        
        restartGame(this)
        
      }
    })

  }
  


    // Update score 1 PLAYER //
    // this.time.addEvent({
    //   delay: 1000, // 1000 ms = 1 second
    //   callback: updateScore,
    //   callbackScope: this,
    //   loop: true,
    // });

    // TESTING floor
    // testFloor = this.physics.add.staticGroup();
    // testFloor
    //   .create(300, 368, 'ground')
    //   .setScale(2)
    //   .refreshBody();

    // this.physics.add.collider(player1, testFloor);
    // this.physics.add.collider(player2, testFloor);
  

  function update() {
 const players = [player1, player2, player3].filter(p => !!p);

  const sizeOrZero = (p) => p?.size ?? 0;

  const p1Larger = player1
    && player1.size > sizeOrZero(player2)
    && player1.size > sizeOrZero(player3);

  const p2Larger = player2
    && player2.size > sizeOrZero(player1)
    && player2.size > sizeOrZero(player3);

  const p3Larger = player3
    && player3.size > sizeOrZero(player1)
    && player3.size > sizeOrZero(player2);

  // Touching pairs with optional chaining
  const touching = {
    p1AboveP2: player1?.body?.touching?.down && player2?.body?.touching?.up,
    p1AboveP3: player1?.body?.touching?.down && player3?.body?.touching?.up,
    p2AboveP1: player2?.body?.touching?.down && player1?.body?.touching?.up,
    p2AboveP3: player2?.body?.touching?.down && player3?.body?.touching?.up,
    p3AboveP1: player3?.body?.touching?.down && player1?.body?.touching?.up,
    p3AboveP2: player3?.body?.touching?.down && player2?.body?.touching?.up,
  };

  // Reset platform type for players not standing on one
  players.forEach(player => {
    if (!player.body.touching.down) {
      player.currentPlatformType = null;
    }
  });

  // Helper for crush check
  function canCrush(attacker, defender) {
    return attacker && defender && attacker.size > defender.size;
  }

  // Crush logic — only crush if touching and attacker is larger
  if (touching.p1AboveP2 && canCrush(player1, player2)) playerLose(player2, null, this);
  if (touching.p1AboveP3 && canCrush(player1, player3)) playerLose(player3, null, this);

  if (touching.p2AboveP1 && canCrush(player2, player1)) playerLose(player1, null, this);
  if (touching.p2AboveP3 && canCrush(player2, player3)) playerLose(player3, null, this);

  if (touching.p3AboveP1 && canCrush(player3, player1)) playerLose(player1, null, this);
  if (touching.p3AboveP2 && canCrush(player3, player2)) playerLose(player2, null, this);

function handleUngrow(player, growPlatform, scene) {
  const isOnGrowPlatform =
    player.body.touching.down && growPlatform.body.touching.up;

  if (!isOnGrowPlatform && player.scaleX > 1) {
    // If there’s already a timer, cancel it
    if (player.ungrowTimer) {
      player.ungrowTimer.remove(false); // cancel previous
      player.ungrowTimer = null;
    }

    // Start a new timer
    player.ungrowTimer = scene.time.delayedCall(10000, () => {
      const stillOff = !(
        player.body.touching.down && growPlatform.body.touching.up
      );

      if (stillOff && player.scaleX > 1) {
        scene.tweens.add({
          targets: player,
          scaleX: 1,
          scaleY: 1,
          duration: 500,
          ease: "Power2",
          onComplete: () => {
            player.body.setSize(
              player.displayWidth,
              player.displayHeight,
              true
            );
            player.setScale(1)
            resetPlayerPhysics(player);
            player.ungrowTimer = null; // clear ref
            player.ungrowTimerStarted = false;
          },
        });
      } else {
        // Cancel shrink if they got back on
        player.ungrowTimer = null;
      }
    });
  } else if (isOnGrowPlatform && player.ungrowTimer) {
    // If they stepped back on, reset the timer immediately
    player.ungrowTimer.remove(false);
    player.ungrowTimer = null;
  }
}


  function handleUngrowForPlayer(player, scene) {
    scene.platforms.getChildren().forEach(platform => {
      if (platform.effect === 'grow') handleUngrow(player, platform, scene);
    });
  }

  players.forEach(player => handleUngrowForPlayer(player, this));

function handleUnshrink(player, shrinkPlatform, scene) {
  const isOnShrinkPlatform =
    player.body.touching.down && shrinkPlatform.body.touching.up;

  if (!isOnShrinkPlatform && player.scaleX < 1) {
    // Cancel any existing timer
    if (player.unshrinkTimer) {
      player.unshrinkTimer.remove(false);
      player.unshrinkTimer = null;
    }

    // Start a new timer
    player.unshrinkTimer = scene.time.delayedCall(10000, () => {
      const stillOff = !(
        player.body.touching.down && shrinkPlatform.body.touching.up
      );

      if (stillOff && player.scaleX < 1) {
        scene.tweens.add({
          targets: player,
          scaleX: 1,
          scaleY: 1,
          duration: 500,
          ease: "Power2",
          onComplete: () => {
            player.body.setSize(
              player.displayWidth,
              player.displayHeight,
              true
            );
            player.setScale(1)
            resetPlayerPhysics(player);
            player.unshrinkTimer = null;
            player.unshrinkTimerStarted = false;
          
          },
        });
      } else {
        player.unshrinkTimer = null;
      }
    });
  } else if (isOnShrinkPlatform && player.unshrinkTimer) {
    // Cancel timer if they step back on
    player.unshrinkTimer.remove(false);
    player.unshrinkTimer = null;
  }
}


  function handleUnshrinkForPlayer(player, scene) {
    scene.platforms.getChildren().forEach(platform => {
      if (platform.effect === 'shrink') handleUnshrink(player, platform, scene);
    });
  }

  players.forEach(player => handleUnshrinkForPlayer(player, this));

  function handleCloudPlatformInteraction(player, cloudPlatform, scene) {
    const isOnCloudPlatform = player.body.touching.down && cloudPlatform.body.touching.up;

    if (isOnCloudPlatform && (player.size === 2 || player.size === 3)) {
      const duration = player.size === 2 ? 2000 : 1000;

      scene.tweens.add({
        targets: cloudPlatform,
        alpha: 0,
        duration,
        ease: 'Linear',
        onComplete: () => {
          const newX = Phaser.Math.Between(-50, 850);
          const newY = 650 + Phaser.Math.Between(0, 200);
          cloudPlatform.disableBody(true, true);
          cloudPlatform.enableBody(true, newX, newY, true, true);
          cloudPlatform.setAlpha(1);
          cloudPlatform.setVelocityY(-velocity);
        },
      });
    }
  }

  function handleCloudPlatformForPlayer(player, scene) {
    scene.platforms.getChildren().forEach(platform => {
      if (platform.effect === 'cloud') handleCloudPlatformInteraction(player, platform, scene);
    });
  }

  players.forEach(player => handleCloudPlatformForPlayer(player, this));

  function updatePlayerSpeed({ scene, controls, player, touching, isLarger }) {
    let speed = 200;

    if (player.currentPlatformType === 'fast') {
      if (controls.right.isDown) speed = 300;
      else if (controls.left.isDown) speed = 100;
    } else if (player.currentPlatformType === 'slow') {
      if (controls.right.isDown) speed = 100;
      else if (controls.left.isDown) speed = 300;
    }

    if ((touching.left || touching.right) && isLarger) {
      speed *= 2;
    }

    return speed;
  }

  const player1Speed = updatePlayerSpeed({
    scene: this,
    player: player1,
    controls: p1Controls,
    touching,
    isLarger: p1Larger,
  });

  const player2Speed = player2
    ? updatePlayerSpeed({
        scene: this,
        player: player2,
        controls: p2Controls,
        touching,
        isLarger: p2Larger,
      })
    : 0;

  const player3Speed = player3
    ? updatePlayerSpeed({
        scene: this,
        player: player3,
        controls: p3Controls,
        touching,
        isLarger: p3Larger,
      })
    : 0;

  function resetPlayerSizeIfNeeded(player) {
    if (player.size === 3 || player.size === 1) {
      this.time.delayedCall(15000, () => {
        this.tweens.add({
          targets: player,
          scaleX: 1,
          scaleY: 1,
          duration: 300,
          ease: 'Power2',
          onComplete: () => {
            player.size = 2;
          },
        });
      });
    }
  }

  players.forEach(player => resetPlayerSizeIfNeeded.call(this, player));

  if (gameOver) {
    setGameOver(this);
  }

  function handlePlayerControls(player, controls, speed) {
    if (player.dead) return;
    if (controls.left.isDown) {
      player.setVelocityX(-speed);
      player.anims.play('left', true);
    } else if (controls.right.isDown) {
      player.setVelocityX(speed);
      player.anims.play('right', true);
    } else {
      player.setVelocityX(0);
      player.anims.play('turn');
    }
  
  }

  handlePlayerControls(player1, p1Controls, player1Speed);
  if (player2) handlePlayerControls(player2, p2Controls, player2Speed);
  if (player3) handlePlayerControls(player3, p3Controls, player3Speed);
}


   

 function setGameOver(scene) {
  if (scene.gameOverHandled) return; // ✅ prevent multiple calls
  scene.gameOverHandled = true;

  scene.physics.pause();

  let winner = allPlayers.filter(p => !deadCounter.includes(p));
  let winnerName; 


  if (typeof winner[0] === "string") {
    winnerName = `${winner[0]} Wins!`;
  } else {
    winnerName = "Draw!";
  }
  gameWinner.set(winnerName);

  scene.add
    .text(
      scene.cameras.main.width / 2,
      scene.cameras.main.height / 3,
      "GAME OVER",
      {
        fontSize: "64px",
        fill: "#ff0000",
        fontStyle: "bold",
      }
    )
    .setOrigin(0.5);
}




  function updateLives(player) {
    if (player == player1) {
      // p1Lives.setText('P1 Lives: ' + player.lives);
      p1LivesText.set(player.lives)
    }

    if (player == player2) {
      // p2Lives.setText('P2 Lives: ' + player.lives);
      p2LivesText.set(player.lives);
    }
    if (player == player3){
      p3LivesText.set(player.lives);
    }
    if (player.lives == 0) {
      let name = `Player ${player.name}`
      deadCounter.push(name)
      if(deadCounter.length == 1 && totalPlayers == 2){
        gameOver = true;
        gameFinished.set(true);
      }
      if(deadCounter.length == 2 && totalPlayers ==3){
        gameOver = true;
        gameFinished.set(true);
      }
      return
    
    }
  }

  function resetLives(player1, player2){
    player1.lives = 3;
    player2.lives = 3;
    gameOver = false;

  }

  // function updateScore() {
  //   if (!gameOver) {
  //     score += 1;
  //     scoreText.setText('Score: ' + score);
  //   }
  //   if (gameOver) {
  //     score = 0;
  //   }
  // }

 function playerLose(playerThatDied, ground, scene) {
  if (playerThatDied.deadThisFrame) return; // prevent double hit
  playerThatDied.deadThisFrame = true;

  playerThatDied.dead = true;
  playerThatDied.body.checkCollision.none = true;
  playerThatDied.unshrinkTimerStarted = false;
  playerThatDied.ungrowTimeStarted = false;
  playerThatDied.setTint(0xff0000);
  playerThatDied.anims.play('turn');
  playerThatDied.lives--;
  updateLives(playerThatDied);

  if (playerThatDied.lives > 0) {
    scene.time.delayedCall(2000, () => {
      const randomX = Phaser.Math.Between(150, 700);
      respawnPlayer.call(scene, playerThatDied, randomX, 75);
      playerThatDied.deadThisFrame = false; // reset for future rounds
    });
  }
}


  function respawnPlayer(playerObj, x, y, tint = null) {
    playerObj.dead = false;

    this.tweens.killTweensOf(playerObj);
    playerObj.setScale(1);
    playerObj.body.checkCollision.none = false;
    playerObj.setCollideWorldBounds(true);
    playerObj.body.checkCollision.down = true;

    playerObj.body.setSize(
      playerObj.displayWidth,
      playerObj.displayHeight,
      true
    );
    playerObj.body.setOffset(0, 0);

    playerObj.setGravityY(initalGravity);
    playerObj.body.allowGravity = true;
    playerObj.body.setImmovable(false);
    // playerObj.setBounce(0.01);
    playerObj.setVelocity(0, 0);

    playerObj.setPosition(x, y);

    playerObj.clearTint();
  

    resetPlayerPhysics(playerObj);
  }

 

  function bounce(player, bouncyPlatform) {
    if (
      player.body.touching.down &&
      bouncyPlatform.body.touching.up
    ) {
      player.setVelocityY(-200);
    }
  }

  // Dont need the below

  function goFast(player, fastPlatform) {
    // console.log('gofast');
  }

  function cloudy(player, cloudPlatform) {
    //  console.log('cloud')
  }

  function goSlow(player, slowPlatform) {
    // console.log('goslow');
  }

  // Dont need the above

  function growSize(player, growPlatform, scene) {
    if (
      player.body.touching.down &&
      growPlatform.body.touching.up &&
      player.scaleX <= 1
    ) {
      makePlayerHeavy(player);
      scene.tweens.add({
        targets: player,
        scaleX: 1.2,
        scaleY: 1.2,
        duration: 350, // in milliseconds
        ease: 'Power2',
        onComplete: () => {
          // ⚠️ Update body size after tween finishes

          const offsetY =
            player.displayHeight - player.body.height;
          player.setOffset(0, offsetY);
          player.setSize(player.width, player.height, true);
          // player.body.setOffset(0, 0);
          player.ungrowTimeStarted = false;
        },
      });
    }
  }

  function shrinkSize(player, shrinkPlatform, scene) {
    if (
      player.body.touching.down &&
      shrinkPlatform.body.touching.up &&
      player.scaleX >= 1
    ) {
      makePlayerLight(player);
      scene.tweens.add({
        targets: player,
        scaleX: 0.75,
        scaleY: 0.75,
        duration: 300, // in milliseconds
        ease: 'Power2',
        onComplete: () => {
          // ⚠️ Update body size after tween finishes

          const offsetY =
            player.displayHeight - player.body.height;
          player.setOffset(0, offsetY);
          player.setSize(player.width, player.height, true);
          // player.body.setOffset(0, 0);
          player.unshrinkTimerStarted = false;
          player.ungrowTimeStarted = false;

        },
      });
    }
  }

  function makePlayerHeavy(player) {
    player.setGravityY(300);
    // player.setBounce(0);
    player.size = 3;
  }

  function makePlayerLight(player) {
    player.setGravityY(100);
    player.size = 1;
  }

  function resetPlayerPhysics(player) {
    player.setGravityY(initalGravity);
    // player.setBounce(0.01);
    player.setDrag(0);
    player.size = 2;
    player.currentPlatformType = null;
  }
</script>

